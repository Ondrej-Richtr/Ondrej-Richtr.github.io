<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Ondřej Richtr - portfolio</title>
    <link>https://ondrej-richtr.github.io/projects/</link>
    <description>Recent content in Projects on Ondřej Richtr - portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
      <language>en</language>
      <lastBuildDate>Tue, 09 Jul 2024 18:07:34 +0200</lastBuildDate><atom:link href="https://ondrej-richtr.github.io/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2.5D Side-scroller Game</title>
      <link>https://ondrej-richtr.github.io/projects/raylib-side-scroller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/raylib-side-scroller/</guid>
      <description>Just a simple side-scrolling game test. I wanted to try out Zig, which is a new modern programing language that I think is pretty nice for games, in combination with Raylib.
During the short development of this project I realized that movement collisions are much easier if the player is able to move only on a grid. Also that drawing arbitrary 2.5D is not as easy as I thought, you can&amp;rsquo;t just layer sprites on top of eachother.</description>
      <content>&lt;p&gt;Just a simple side-scrolling game test. I wanted to try out Zig, which is a new modern programing language that I think is pretty nice for games, in combination with &lt;a href=&#34;https://www.raylib.com/&#34;&gt;Raylib&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the short development of this project I realized that movement collisions are much easier if the player is able to move only on a grid.
Also that drawing arbitrary 2.5D is not as easy as I thought, you can&amp;rsquo;t just layer sprites on top of eachother.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;
  Download
  &lt;a href=&#34;#download&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You can download portable version for &lt;a href=&#34;https://ondrej-richtr.github.io//raylib-2d-v1.zip&#34;&gt;Windows x86_64 here (ZIP).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Should work on Linux too when executed through &lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;controls&#34;&gt;
  Controls
  &lt;a href=&#34;#controls&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Arrows&lt;/code&gt; to move.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Space&lt;/code&gt; to jump.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift&lt;/code&gt; to attack the dummy.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; to exit the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;
  Screenshots
  &lt;a href=&#34;#screenshots&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//raylib2d-1-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib2d-1-crop.PNG&#34; alt=&#34;Raylib side-scroller - screenshot 1&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//raylib2d-2-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib2d-2-crop.PNG&#34; alt=&#34;Raylib side-scroller - screenshot 2&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I might work from this project if I ever decide to truly make a 2D game.&lt;/p&gt;
</content>
    </item>
    <item>
      <title>3D Game using Raylib</title>
      <link>https://ondrej-richtr.github.io/projects/raylib-3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/raylib-3d/</guid>
      <description>My first attempt at a 3D game. I used simple game programming library Raylib for rendering and I/O. Project is (again) entirely in Zig, seems like a good combination with Raylib.
The &amp;ldquo;game&amp;rdquo; is mainly just a playground of stuff I was testing out. You can build, delete or edit simple structures, and there is a short obstacle course that you can try to jump trough - but it proved to be quite a challenge for some people.</description>
      <content>&lt;p&gt;My first attempt at a 3D game. I used simple game programming library &lt;a href=&#34;https://www.raylib.com/&#34;&gt;Raylib&lt;/a&gt; for rendering and I/O.
Project is (again) entirely in Zig, seems like a good combination with Raylib.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;game&amp;rdquo; is mainly just a playground of stuff I was testing out. You can build, delete or edit simple structures, and there is a short obstacle course that you can try to jump trough - but it proved to be quite a challenge for some people.
I also implemented my own version of collision mechanics. Even though the collision system is simple it still works nicely even with moving platforms and such.&lt;/p&gt;

&lt;h3 id=&#34;browser-version&#34;&gt;
  Browser version
  &lt;a href=&#34;#browser-version&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Play in your browser!&lt;/strong&gt;
You can test the web version of the game below, all you need to do is click onto the game&amp;rsquo;s frame. Requires WebAssembly and WebGL.&lt;/p&gt;
&lt;iframe src=&#34;https://ondrej-richtr.github.io//games/raylib3d_project.html&#34; title=&#34;Raylib 3D game, web version&#34; width=640 height=360&gt;&lt;/iframe&gt; 
&lt;p&gt;I also recommned trying it in &lt;a href=&#34;https://ondrej-richtr.github.io//games/raylib3d_project.html&#34;&gt;FULLSCREEN.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The browser version is compiled using &lt;a href=&#34;https://emscripten.org/&#34;&gt;emscripten&lt;/a&gt; in combination with Zig build system. It works okayish, emscripten automatically sets fps equal to your device refresh rate (usually 60), so the game runs slower than usual. It also works on mobile devices, but I didn&amp;rsquo;t implement proper touch controls yet, so it isn&amp;rsquo;t really playable there.&lt;/p&gt;

&lt;h3 id=&#34;download&#34;&gt;
  Download
  &lt;a href=&#34;#download&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;You can download portable version for &lt;a href=&#34;https://ondrej-richtr.github.io//raylib-3d-v8.zip&#34;&gt;Windows x86_64 here (ZIP).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Should work on Linux too when executed through &lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt;, but I noticed some issues with number keys not working.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;controls&#34;&gt;
  Controls
  &lt;a href=&#34;#controls&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Mouse&lt;/code&gt; to look.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;W&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; to move.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; to switch into &amp;lsquo;Ray&amp;rsquo; mode - &lt;code&gt;Left Mouse&lt;/code&gt; to shoot a ray, &lt;code&gt;Right Mouse&lt;/code&gt; to delete all rays.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; to switch into &amp;lsquo;Build&amp;rsquo; mode - &lt;code&gt;Tab&lt;/code&gt; to toggle between build structures (&lt;em&gt;wall&lt;/em&gt;, &lt;em&gt;platform&lt;/em&gt;, &lt;em&gt;parallelogram&lt;/em&gt;), &lt;code&gt;Arrows&lt;/code&gt; to move the structure, &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt; (or &lt;code&gt;PageUp&lt;/code&gt;/&lt;code&gt;PageDown&lt;/code&gt;) to adjust build height.
Hold &lt;code&gt;Left Mouse&lt;/code&gt; to build a structure and adjust it&amp;rsquo;s size, &lt;code&gt;Right Mouse&lt;/code&gt; to delete new structure, &lt;code&gt;Enter&lt;/code&gt; to confirm new structure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3&lt;/code&gt; to switch into &amp;lsquo;Delete&amp;rsquo; mode - &lt;code&gt;Left Mouse&lt;/code&gt; to delete the structure you aim at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4&lt;/code&gt; to switch into &amp;lsquo;Edit&amp;rsquo; mode - &lt;code&gt;Left Mouse&lt;/code&gt; to select existing structure for editing, &lt;code&gt;Right Mouse&lt;/code&gt; or &lt;code&gt;Enter&lt;/code&gt; to stop editing. &lt;code&gt;Arrows&lt;/code&gt; to move the edited structure, &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt; (or &lt;code&gt;PageUp&lt;/code&gt;/&lt;code&gt;PageDown&lt;/code&gt;) to adjust it&amp;rsquo;s height or vertical position, &lt;code&gt;Q&lt;/code&gt;/&lt;code&gt;E&lt;/code&gt; to rotate it along the &lt;em&gt;Z&lt;/em&gt; axis, &lt;code&gt;Z&lt;/code&gt;/&lt;code&gt;X&lt;/code&gt; to rotate it along the &lt;em&gt;X&lt;/em&gt; axis, &lt;code&gt;C&lt;/code&gt;/&lt;code&gt;V&lt;/code&gt; to rotate it along the &lt;em&gt;Y&lt;/em&gt; axis.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;1&lt;/code&gt; to switch into &amp;lsquo;Game view&amp;rsquo; - Standard first person movement with gravity and collisions, use &lt;code&gt;Space&lt;/code&gt; key to jump.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;2&lt;/code&gt; to switch into &amp;lsquo;Free view&amp;rsquo; - First person free view without gravity and collisions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; to teleport to ground level.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;H&lt;/code&gt; to show/hide collision boxes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Esc&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; to pause the game and then &lt;code&gt;Esc&lt;/code&gt; for unpause or &lt;code&gt;Q&lt;/code&gt; to quit the game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;
  Screenshots
  &lt;a href=&#34;#screenshots&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//raylib3d-5.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib3d-5.png&#34; alt=&#34;Raylib 3D game - screenshot 5&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//raylib3d-7.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib3d-7.png&#34; alt=&#34;Raylib 3D game - screenshot 7&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//raylib3d-6.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib3d-6.png&#34; alt=&#34;Raylib 3D game - screenshot 6&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//raylib3d-8.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//raylib3d-8.png&#34; alt=&#34;Raylib 3D game - screenshot 8&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had a break from this project because of my studies, but I returned to it and work on it whenever I can.
Currently I&amp;rsquo;m working on proper player collision system and I also started to experiment with lighting.&lt;/p&gt;
&lt;p&gt;The long term goal is probably going to be a FPS game with good movement/collision mechanics. I also want to implement my own 3D mesh handling as Raylib is pretty limiting in this regard &lt;em&gt;(maybe the real goal would be to remove Raylib altogether?)&lt;/em&gt;. Nicer in-game level editor would be great as well, but the existing one is usable too.&lt;/p&gt;
</content>
    </item>
    <item>
      <title>SFML Game</title>
      <link>https://ondrej-richtr.github.io/projects/sfml-game/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/sfml-game/</guid>
      <description>My first bigger project I made. It was supposed to be a visual novel type of game, but in the end I ended up spending majority of time creating it&amp;rsquo;s user interface. I used C++, but in the end it was more of a C with classes and templates, one of the crucial experiences to realize that classic OOP is super bad for game programming. For drawing to screen and I/O C++ multi-media library SFML was used.</description>
      <content>&lt;p&gt;My first bigger project I made. It was supposed to be a visual novel type of game, but in the end I ended up spending majority of time creating it&amp;rsquo;s user interface. I used C++, but in the end it was more of a C with classes and templates, one of the crucial experiences to
realize that classic OOP is super bad for game programming. For drawing to screen and I/O C++ multi-media library &lt;a href=&#34;https://www.sfml-dev.org/&#34;&gt;SFML&lt;/a&gt; was used.&lt;/p&gt;
&lt;p&gt;The whole entirety of user interface is programmed from scratch, that includes Text buttons, Sprite buttons, Sliders, Progress bars, Checkboxes, Multiline textboxes (also with slow-print effect) and numerouse Editboxes for text. The &amp;ldquo;game tree&amp;rdquo; of the game&amp;rsquo;s story is not hardcoded in, instead it is read at the startup from provided pseudo-XML text files (e.g. dialogs.txt). That means you can edit the story without need to recompile. There was also working system for saving/loading games, but there&amp;rsquo;s no proper UI implemented for it.&lt;/p&gt;
&lt;p&gt;Works on Windows and Linux, but I ran into issues when trying to build portable binary for Windows, that&amp;rsquo;s why there&amp;rsquo;s no download. I also decided not to make source available, since it&amp;rsquo;s one of my oldest projects and thus the code quality is terrible.&lt;/p&gt;

&lt;h3 id=&#34;video-demo&#34;&gt;
  Video Demo
  &lt;a href=&#34;#video-demo&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;video width=&#34;100%&#34; controls&gt;
    &lt;source src=&#34;https://ondrej-richtr.github.io//sfml-demo2.mp4&#34; type=&#34;video/mp4&#34;&gt;
    Demo video of the SFML game, however your browser does not support the video tag.
&lt;/video&gt;

&lt;h3 id=&#34;screenshots&#34;&gt;
  Screenshots
  &lt;a href=&#34;#screenshots&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//sfml1-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//sfml1-crop.PNG&#34; alt=&#34;SFML game - screenshot 1&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//sfml2-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//sfml2-crop.PNG&#34; alt=&#34;SFML game - screenshot 2&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//sfml3-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//sfml3-crop.PNG&#34; alt=&#34;SFML game - screenshot 3&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently this project is abandoned, it makes much more sense to start a new one instead. However I ended up using it as a basis and &amp;lsquo;GUI framework&amp;rsquo; for some of my other side things (e.g. static website generator for my gf).&lt;/p&gt;
</content>
    </item>
    <item>
      <title>Target practice game</title>
      <link>https://ondrej-richtr.github.io/projects/target-practice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/target-practice/</guid>
      <description>This is my &amp;ldquo;learn OpenGL properly&amp;rdquo; project. Plus I also wanted to have some open source C++ project to show off. Besides that the goal is to make first person shooter, where you practice your aim and reflexes by shooting appearing targets.
I was surprised how nice OpenGL API actually is and how fun can writing shader be. In addition it was nice opportunity to learn a lot about lighting, materials, 3D models and such.</description>
      <content>&lt;p&gt;This is my &amp;ldquo;learn OpenGL properly&amp;rdquo; project. Plus I also wanted to have some open source C++ project to show off.
Besides that the goal is to make first person shooter, where you practice your aim and reflexes by shooting appearing targets.&lt;/p&gt;
&lt;p&gt;I was surprised how nice OpenGL API actually is and how fun can writing shader be.
In addition it was nice opportunity to learn a lot about lighting, materials, 3D models and such.&lt;/p&gt;

&lt;h3 id=&#34;used-technology&#34;&gt;
  Used technology
  &lt;a href=&#34;#used-technology&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenGL + GLSL&lt;/strong&gt; – I started with version 3.0 and then switched to ES 2.0 because of planned support for WebGL.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.glfw.org/&#34;&gt;&lt;strong&gt;GLFW3&lt;/strong&gt;&lt;/a&gt; – Well known library that I used for window and mouse/keyboard input managing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Immediate-Mode-UI/Nuklear&#34;&gt;&lt;strong&gt;Nuklear&lt;/strong&gt;&lt;/a&gt; – Immediate mode UI library I want to use in this project, currently is used only experimentally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As mentioned, the project is programmed in C++. I&amp;rsquo;m going for C++17 and I use modern C++ where I see fit (smart pointers, constexpr, std::move&amp;hellip;). However the design of OpenGL API makes it typically unnecessary.
Personally I still prefer Zig over C++ or C. Zig would help dramatically with a lot of annoyances like C++ constructors, compile time execution and build system.&lt;/p&gt;

&lt;h3 id=&#34;screenshots---lighting-demo&#34;&gt;
  Screenshots - Lighting demo
  &lt;a href=&#34;#screenshots---lighting-demo&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//target-2-crop.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//target-2-crop.png&#34; alt=&#34;target practice lighting demo - screenshot 2&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//target-3-crop.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//target-3-crop.png&#34; alt=&#34;target practice lighting demo - screenshot 3&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;screenshots---target-shooting&#34;&gt;
  Screenshots - Target shooting
  &lt;a href=&#34;#screenshots---target-shooting&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//target-1-crop.png&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//target-1-crop.png&#34; alt=&#34;target practice shooting demo - screenshot 1&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;p&gt;Further plans are obviously to finish the target shooting aspect of the game, include levels, moving targets and variety of other mechanics. Also maing Nuklear UI work properly and make the project run in the web.&lt;/p&gt;
</content>
    </item>
    <item>
      <title>todolist</title>
      <link>https://ondrej-richtr.github.io/projects/todolist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/todolist/</guid>
      <description>Simple program written in C for keeping notes, deadlines and TO-DO task. I attempted to make it as much &amp;ldquo;unix-like&amp;rdquo; as possible. You can use it only through command line, but both interactive and non-interactive modes are available. UTF-8 is built in, but it can cause problems in terminals without UTF-8 support (mainly on Windows).
Should work on all major platforms. All you need to build it is a C compiler, I used gcc.</description>
      <content>&lt;p&gt;Simple program written in C for keeping notes, deadlines and TO-DO task. I attempted to make it as much &amp;ldquo;unix-like&amp;rdquo; as possible.
You can use it only through command line, but both interactive and non-interactive modes are available. UTF-8 is built in, but it can cause problems in terminals without UTF-8 support (mainly on Windows).&lt;/p&gt;
&lt;p&gt;Should work on all major platforms. All you need to build it is a C compiler, I used &lt;code&gt;gcc&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;screenshots---interactive-mode&#34;&gt;
  Screenshots - Interactive mode
  &lt;a href=&#34;#screenshots---interactive-mode&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//todo1-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//todo1-crop.PNG&#34; alt=&#34;todo interactive mode - screenshot 1&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//todo2-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//todo2-crop.PNG&#34; alt=&#34;todo interactive mode - screenshot 2&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;screenshots---non-interactive-mode&#34;&gt;
  Screenshots - Non-Interactive mode
  &lt;a href=&#34;#screenshots---non-interactive-mode&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://ondrej-richtr.github.io//todo3-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//todo3-crop.PNG&#34; alt=&#34;todo non-interactive mode - screenshot 1&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://ondrej-richtr.github.io//todo4-crop.PNG&#34;&gt;&lt;img src=&#34;https://ondrej-richtr.github.io//todo4-crop.PNG&#34; alt=&#34;todo non-interactive mode - screenshot 2&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently the development on this project is stopped. I wanted to do one more release, but since it&amp;rsquo;s perfectly usable (for me) as is, I decided not to continue with it for now. However this little program proved useful, especially for keeping dates of deadlines during my studies.&lt;/p&gt;
</content>
    </item>
    <item>
      <title>vulkan_decode</title>
      <link>https://ondrej-richtr.github.io/projects/vulkan-decode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>

      <guid>https://ondrej-richtr.github.io/projects/vulkan-decode/</guid>
      <description>A H.264 decoder I made as my bachelor&amp;rsquo;s thesis (text is in Czech, link is HERE). &amp;lsquo;vulkan_decode&amp;rsquo; is structured as a module for UltraGrid (software tool for low latency and high-quality video network transmissions). It&amp;rsquo;s using Vulkan Video API for hardware accelerated decoding. Module is programmed in C, same as majority of UltraGrid.
This project (thesis) was pretty hardcore sice I only had half a year to program the module and write the text.</description>
      <content>&lt;p&gt;A H.264 decoder I made as my bachelor&amp;rsquo;s thesis (text is in Czech, link is &lt;a href=&#34;https://is.muni.cz/th/s0c33/&#34;&gt;HERE&lt;/a&gt;). &amp;lsquo;vulkan_decode&amp;rsquo; is structured as a module for &lt;a href=&#34;https://www.ultragrid.cz&#34;&gt;UltraGrid&lt;/a&gt; (software tool for low latency and high-quality video network transmissions). It&amp;rsquo;s using &lt;a href=&#34;https://www.khronos.org/blog/khronos-finalizes-vulkan-video-extensions-for-accelerated-h.264-and-h.265-decode&#34;&gt;Vulkan Video API&lt;/a&gt; for hardware accelerated decoding. Module is programmed in C, same as majority of UltraGrid.&lt;/p&gt;
&lt;p&gt;This project (thesis) was pretty hardcore sice I only had half a year to program the module and write the text. I also had no knowledge about video coding, H.264 coding format, UltraGrid, Vulkan or Vulkan Video beforehand.
To not make it too easy, Vulkan actually wants you to parse majority of H.264 bitstream data yourself and also wants you to manually manage reference frames.
Output frames are in NV12 format, which is not supported in UltraGrid, so the module needs to manually convert them to I420&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.
But in the end it all works, even though there are few limitations mentioned below.&lt;/p&gt;
&lt;p&gt;I think vulkan_decode module is an interesting achievment as there were only 3 other open source projects&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; that used Vulkan Video for decoding at that time. You can find my fork of UltraGrid with vulkan_decode implementation &lt;a href=&#34;https://github.com/Ondrej-Richtr/UltraGrid&#34;&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;technical-aspects&#34;&gt;
  Technical aspects
  &lt;a href=&#34;#technical-aspects&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Decodes H.264 video only.&lt;/li&gt;
&lt;li&gt;The only supported subsampling is 4:2:0 (Vulkan limitation).&lt;/li&gt;
&lt;li&gt;Works reliably only with &lt;em&gt;high&lt;/em&gt; video profile.&lt;/li&gt;
&lt;li&gt;Smoothly decodes 720p@100fps or 1080p@30fps – higher resolutions or fps are possible, but might not get decoded properly in time&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Should work on all major platforms. However you need to have GPU and driver that supports Vulkan Video.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;video-demo&#34;&gt;
  Video Demo
  &lt;a href=&#34;#video-demo&#34; class=&#34;hanchor&#34; ariaLabel=&#34;Anchor&#34;&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;video width=&#34;100%&#34; controls&gt;
    &lt;source src=&#34;https://ondrej-richtr.github.io//vulkan-decode-demo1.mp4&#34; type=&#34;video/mp4&#34;&gt;
    Demo video of the SFML game, however your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;This module really needs hardware accelerated conversion of formats, which would dramatically boost it&amp;rsquo;s performance and allow it to decode high-res and/or high-framerate video streams. Since I had only like 4 days left to write the whole text of the thesis, I decided to skip this important optimization.&lt;/p&gt;
&lt;p&gt;Not sure if I will ever work on this again. Maybe if I would get contacted by UltraGrid devs or something like that.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Thanks to lack of time I had to make this conversion happen on CPU. That makes it the biggest bottleneck of the whole decoding process.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/turanszkij/WickedEngine&#34;&gt;WickedEngine&lt;/a&gt;, &lt;a href=&#34;https://github.com/cyanreg/FFmpeg/tree/vulkan&#34;&gt;Lynne&amp;rsquo;s ffmpeg branch&lt;/a&gt;, &lt;a href=&#34;https://github.com/nvpro-samples/vk_video_samples&#34;&gt;NVIDIA&amp;rsquo;s Vulkan Video samples&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Sadly there was not enough time to implement performance optimizations.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content>
    </item>
  </channel>
</rss>
